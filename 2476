class Solution {
public:
    vector<int> arr;
    void traverse(TreeNode* root){
        if (root==NULL) return;
        traverse (root->left);
        arr.push_back(root->val); 
        traverse(root->right); 
        }
    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {
        vector<vector<int>> ans;
        traverse (root);
        for ( auto i : queries) {
            long long left =0; 
           long long right = arr.size()-1; 
            long long m=-1;
            while ( left<=right) {
               long long mid = (left+(right-left)/2);
                
                if (arr[mid] == i) {
                  m=mid;  
                  break;
                  
                }
                if (arr[mid] < i) {
                    m= mid;
                    left = mid +1;
                }
                else {
                    right = mid-1; 
                }
            }
            
            if (m!=-1 && arr[m] ==i) {
               ans.push_back({i,i});
            }
            else {
                
                if ( m== -1) {
                  ans.push_back({-1,arr[0]});
                }
                else if(m ==arr.size()-1) {
                   ans.push_back({arr[m],-1});
                }
                else {
                   ans.push_back({arr[m],arr[m+1]});
                }
                
            }
            
        }
        return ans;
    }
};
